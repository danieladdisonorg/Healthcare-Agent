from fastapi import FastAPI, HTTPException
from typing import List, Dict, Any
from pydantic import BaseModel

from agent import HealthcareAgent

agent = HealthcareAgent()

app = FastAPI(
    title="Healthcare AI Agent",
    description="An AI agent to provide details on ICU patients and upcoming appointments.",
    version="0.1.0"
)

# Data will now be managed by the agent instance
# icu_patients: Dict[str, Dict] = {}
# appointments: Dict[str, List[Dict]] = {}

@app.on_event("startup")
async def startup_event():
    """Placeholder for startup logic, like starting the Kafka consumer."""
    print("Healthcare AI Agent is starting up...")
    agent.start_consumer() # Start the Kafka consumer

@app.get("/")
async def root():
    return {"message": "Healthcare AI Agent is running. Use /docs for API documentation."}

@app.get("/icu/patients", response_model=Dict[str, Dict])
async def get_icu_patients():
    """Retrieve a list of all patients currently in the ICU."""
    if not agent.icu_patients:
        return {"message": "No ICU patient data available at the moment."}
    return agent.icu_patients

class ChatQuery(BaseModel):
    query: str
    session_id: str = "default_session" # Optional: for maintaining conversation history

class ChatResponse(BaseModel):
    response: str
    session_id: str

@app.post("/chat", response_model=ChatResponse)
async def chat_with_agent(chat_query: ChatQuery):
    """Endpoint for doctors to chat with the Healthcare AI agent."""
    response_text = await agent.handle_chat(chat_query.query, chat_query.session_id)
    return ChatResponse(response=response_text, session_id=chat_query.session_id)

@app.get("/alerts", response_model=List[Dict[str, Any]])
async def get_active_alerts():
    """Retrieve a list of active alerts generated by the agent."""
    alerts = agent.get_alerts()
    return alerts

@app.get("/icu/patients/{patient_id}", response_model=Dict)
async def get_icu_patient_details(patient_id: str):
    """Retrieve details for a specific ICU patient."""
    patient = agent.icu_patients.get(patient_id)
    if not patient:
        raise HTTPException(status_code=404, detail=f"Patient {patient_id} not found in ICU")
    return patient

@app.get("/appointments/{doctor_id}", response_model=List[Dict])
async def get_upcoming_appointments(doctor_id: str):
    """Retrieve upcoming appointments for a specific doctor."""
    doctor_appointments = agent.appointments.get(doctor_id)
    if not doctor_appointments:
        return [] # Return empty list if no appointments, or a message
        # return {"message": f"No upcoming appointments found for Dr. {doctor_id}."}
    return doctor_appointments

@app.on_event("shutdown")
async def shutdown_event():
    """Placeholder for shutdown logic."""
    print("Healthcare AI Agent is shutting down...")
    agent.stop_consumer() # Stop the Kafka consumer
